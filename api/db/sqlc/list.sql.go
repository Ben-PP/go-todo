// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: list.sql

package db

import (
	"context"
)

const createList = `-- name: CreateList :one
INSERT INTO lists (id, user_id, title, description)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, title, description, created_at, updated_at
`

type CreateListParams struct {
	ID          string `json:"id"`
	UserID      string `json:"user_id"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) (List, error) {
	row := q.db.QueryRow(ctx, createList,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Description,
	)
	var i List
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteList = `-- name: DeleteList :execrows
DELETE FROM lists
WHERE id = $1
`

func (q *Queries) DeleteList(ctx context.Context, id string) (int64, error) {
	result, err := q.db.Exec(ctx, deleteList, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getList = `-- name: GetList :one
SELECT id, user_id, title, description, created_at, updated_at FROM lists
WHERE id = $1
`

func (q *Queries) GetList(ctx context.Context, id string) (List, error) {
	row := q.db.QueryRow(ctx, getList, id)
	var i List
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getListIdsAccessible = `-- name: GetListIdsAccessible :many
SELECT id FROM lists l
WHERE l.user_id = $1 OR id IN (
    SELECT list_id FROM list_shares ls WHERE ls.user_id = $1
)
`

func (q *Queries) GetListIdsAccessible(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.Query(ctx, getListIdsAccessible, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateList = `-- name: UpdateList :one
UPDATE lists
SET title = $1, description = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $3
RETURNING id, user_id, title, description, created_at, updated_at
`

type UpdateListParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	ID          string `json:"id"`
}

func (q *Queries) UpdateList(ctx context.Context, arg UpdateListParams) (List, error) {
	row := q.db.QueryRow(ctx, updateList, arg.Title, arg.Description, arg.ID)
	var i List
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
