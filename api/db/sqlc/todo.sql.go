// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: todo.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (id, list_id, user_id, parent_id, title, description, complete_before)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, parent_id, list_id, user_id, title, description, completed, created_at, updated_at, complete_before, completed_at
`

type CreateTodoParams struct {
	ID             string           `json:"id"`
	ListID         string           `json:"list_id"`
	UserID         string           `json:"user_id"`
	ParentID       pgtype.Text      `json:"parent_id"`
	Title          string           `json:"title"`
	Description    pgtype.Text      `json:"description"`
	CompleteBefore pgtype.Timestamp `json:"complete_before"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo,
		arg.ID,
		arg.ListID,
		arg.UserID,
		arg.ParentID,
		arg.Title,
		arg.Description,
		arg.CompleteBefore,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.ListID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompleteBefore,
		&i.CompletedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteTodo, id)
	return err
}

const deleteTodoByIdWithListId = `-- name: DeleteTodoByIdWithListId :exec
DELETE FROM todos
WHERE id = $1 AND list_id = $2
`

type DeleteTodoByIdWithListIdParams struct {
	ID     string `json:"id"`
	ListID string `json:"list_id"`
}

func (q *Queries) DeleteTodoByIdWithListId(ctx context.Context, arg DeleteTodoByIdWithListIdParams) error {
	_, err := q.db.Exec(ctx, deleteTodoByIdWithListId, arg.ID, arg.ListID)
	return err
}

const getTodoByIdWithListId = `-- name: GetTodoByIdWithListId :one
SELECT id, parent_id, list_id, user_id, title, description, completed, created_at, updated_at, complete_before, completed_at FROM todos
WHERE id = $1 AND list_id = $2
`

type GetTodoByIdWithListIdParams struct {
	ID     string `json:"id"`
	ListID string `json:"list_id"`
}

func (q *Queries) GetTodoByIdWithListId(ctx context.Context, arg GetTodoByIdWithListIdParams) (Todo, error) {
	row := q.db.QueryRow(ctx, getTodoByIdWithListId, arg.ID, arg.ListID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.ListID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompleteBefore,
		&i.CompletedAt,
	)
	return i, err
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
SET title = $1, description = $2, completed = $3, complete_before = $4, updated_at = CURRENT_TIMESTAMP, completed_at = CASE WHEN $3 THEN CURRENT_TIMESTAMP ELSE NULL END
WHERE id = $5
RETURNING id, parent_id, list_id, user_id, title, description, completed, created_at, updated_at, complete_before, completed_at
`

type UpdateTodoParams struct {
	Title          string           `json:"title"`
	Description    pgtype.Text      `json:"description"`
	Completed      bool             `json:"completed"`
	CompleteBefore pgtype.Timestamp `json:"complete_before"`
	ID             string           `json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, updateTodo,
		arg.Title,
		arg.Description,
		arg.Completed,
		arg.CompleteBefore,
		arg.ID,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.ListID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompleteBefore,
		&i.CompletedAt,
	)
	return i, err
}
